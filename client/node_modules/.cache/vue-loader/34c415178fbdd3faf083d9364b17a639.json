{"remainingRequest":"C:\\Users\\Administrator\\Desktop\\django-vue-admin3333\\client\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Administrator\\Desktop\\django-vue-admin3333\\client\\src\\views\\system\\user.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Administrator\\Desktop\\django-vue-admin3333\\client\\src\\views\\system\\user.vue","mtime":1620834720964},{"path":"C:\\Users\\Administrator\\Desktop\\django-vue-admin3333\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Administrator\\Desktop\\django-vue-admin3333\\client\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Users\\Administrator\\Desktop\\django-vue-admin3333\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Administrator\\Desktop\\django-vue-admin3333\\client\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { getUserList, createUser, deleteUser, updateUser } from \"@/api/user\";\nimport { getOrgAll } from \"@/api/org\"\nimport { getRoleAll } from \"@/api/role\"\nimport { genTree } from \"@/utils\"\nimport checkPermission from \"@/utils/permission\"\nimport { upUrl, upHeaders } from \"@/api/file\"\nimport Pagination from \"@/components/Pagination\" // secondary package based on el-pagination\nimport Treeselect from '@riophae/vue-treeselect'\nimport '@riophae/vue-treeselect/dist/vue-treeselect.css'\nconst defaultUser = {\n  id: \"\",\n  name: \"\",\n  username: \"\",\n  dept: null,\n  avatar: \"/media/default/avatar.png\"\n};\nexport default {\n  components: { Pagination, Treeselect },\n  data() {\n    return {\n      user: defaultUser,\n      upHeaders: upHeaders(),\n      upUrl: upUrl(),\n      userList: {count:0},\n      roles: [],\n      listLoading: true,\n      listQuery: {\n        page: 1,\n        page_size: 20\n      },\n      enabledOptions: [\n        { key: \"true\", display_name: \"激活\" },\n        { key: \"false\", display_name: \"禁用\" }\n      ],\n      dialogVisible: false,\n      dialogType: \"new\",\n      rule1: {\n        name: [{ required: true, message: \"请输入姓名\", trigger: \"blur\" }],\n        username: [{ required: true, message: \"请输入账号\", trigger: \"change\" }]\n        // password: [\n        //   { required: true, message: '请输入密码', trigger: 'change' }\n        // ],\n      },\n      filterOrgText: \"\",\n      treeLoding: false,\n      orgData: []\n    };\n  },\n  computed: {},\n  watch: {\n    filterOrgText(val) {\n      this.$refs.tree.filter(val);\n    }\n  },\n  created() {\n    this.getList();\n    this.getOrgAll();\n    this.getRoleAll();\n  },\n  methods: {\n    checkPermission,\n    handleAvatarSuccess(res, file) {\n        this.user.avatar = res.data.path\n    },\n    beforeAvatarUpload(file) {\n      const isLt2M = file.size / 1024 / 1024 < 2;\n      if (!isLt2M) {\n        this.$message.error(\"上传头像图片大小不能超过 2MB!\");\n      }\n      return isLt2M;\n    },\n    filterNode(value, data) {\n      if (!value) return true;\n      return data.label.indexOf(value) !== -1;\n    },\n    handleOrgClick(obj, node, vue) {\n      this.listQuery.page = 1;\n      this.listQuery.dept = obj.id;\n      this.getList();\n    },\n    getList() {\n      this.listLoading = true;\n      getUserList(this.listQuery).then(response => {\n        if (response.data) {\n          this.userList = response.data\n        }\n        this.listLoading = false;\n      });\n    },\n    getOrgAll() {\n      this.treeLoding = true;\n      getOrgAll().then(response => {\n        this.orgData = genTree(response.data);\n        this.treeLoding = false;\n      });\n    },\n    getRoleAll() {\n      getRoleAll().then(response => {\n        this.roles = genTree(response.data);\n      });\n    },\n    resetFilter() {\n      this.listQuery = {\n        page: 1,\n        page_size: 20\n      };\n      this.getList();\n    },\n    handleFilter() {\n      this.listQuery.page = 1;\n      this.getList();\n    },\n    handleAddUser() {\n      this.user = Object.assign({}, defaultUser);\n      this.dialogType = \"new\";\n      this.dialogVisible = true;\n      this.$nextTick(() => {\n        this.$refs[\"Form\"].clearValidate();\n      });\n    },\n    handleEdit(scope) {\n      this.user = Object.assign({}, scope.row); // copy obj\n      this.dialogType = \"edit\";\n      this.dialogVisible = true;\n      this.$nextTick(() => {\n        this.$refs[\"Form\"].clearValidate();\n      });\n    },\n    handleDelete(scope) {\n      this.$confirm(\"确认删除?\", \"警告\", {\n        confirmButtonText: \"确认\",\n        cancelButtonText: \"取消\",\n        type: \"error\"\n      })\n        .then(async () => {\n          await deleteUser(scope.row.id);\n          this.userList.splice(scope.row.index, 1);\n          this.$message({\n            type: \"success\",\n            message: \"成功删除!\"\n          });\n        })\n        .catch(err => {\n          console.error(err);\n        });\n    },\n    async confirm(form) {\n      this.$refs[form].validate(valid => {\n        if (valid) {\n          const isEdit = this.dialogType === \"edit\";\n          if (isEdit) {\n            updateUser(this.user.id, this.user).then(res => {\n                this.getList();\n                this.dialogVisible = false;\n                this.$message({\n                  message: \"编辑成功\",\n                  type: \"success\",\n                });\n            });\n          } else {\n            createUser(this.user).then(res => {\n                this.getList();\n                this.dialogVisible = false;\n                this.$message({\n                  message: \"新增成功\",\n                  type: \"success\"\n                });\n            });\n          }\n        } else {\n          return false;\n        }\n      });\n    }\n  }\n};\n",null]}