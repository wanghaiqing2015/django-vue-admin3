{"remainingRequest":"C:\\Users\\Administrator\\Desktop\\django-vue-admin3333\\client\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Administrator\\Desktop\\django-vue-admin3333\\client\\src\\views\\system\\dict.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Administrator\\Desktop\\django-vue-admin3333\\client\\src\\views\\system\\dict.vue","mtime":1620834720964},{"path":"C:\\Users\\Administrator\\Desktop\\django-vue-admin3333\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Administrator\\Desktop\\django-vue-admin3333\\client\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Users\\Administrator\\Desktop\\django-vue-admin3333\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Administrator\\Desktop\\django-vue-admin3333\\client\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { getDictTypeList, getDictList, createDictType, createDict, updateDictType, updateDict, deleteDictType, deleteDict } from '@/api/dict'\nimport { genTree } from '@/utils'\nimport checkPermission from '@/utils/permission'\nimport Pagination from '@/components/Pagination' // secondary package based on el-pagination\nimport Treeselect from '@riophae/vue-treeselect'\nimport '@riophae/vue-treeselect/dist/vue-treeselect.css'\n\nconst defaultDictType = {\n  id: '',\n  name: '',\n  code: '',\n  parent: null\n}\nconst defaultDict = {\n  id: '',\n  name: '',\n  description: '',\n  sort: 1,\n  type: null,\n  is_used: true,\n  parent:null\n}\nexport default {\n  components: { Pagination, Treeselect },\n  data() {\n    return {\n      dicttype: Object.assign({}, defaultDictType),\n      dict: Object.assign({}, defaultDict),\n      search:'',\n      dictList: [],\n      listLoading: true,\n      listQuery: {},\n      dgV1: false,\n      dgT1: 'new',\n      rule1: {\n        name: [{ required: true, message: '请输入名称', trigger: 'blur' }],\n        code: [{ required: true, message: '请输入代号', trigger: 'change' }]\n      },\n      dgV2: false,\n      dgT2: 'new',\n      rule2: {\n        name: [{ required: true, message: '请输入名称', trigger: 'blur' }]\n      },\n      filterDictTypeText: '',\n      treeLoding: false,\n      dictTypeData: [],\n    }\n  },\n  computed: {},\n  watch: {\n    filterDictTypeText(val) {\n      this.$refs.tree.filter(val)\n    }\n  },\n  created() {\n    this.getDictTypeList()\n  },\n  methods: {\n    checkPermission,\n    filterNode(value, data) {\n      if (!value) return true\n      return data.label.indexOf(value) !== -1\n    },\n    handleDictTypeClick(obj, node, vue) {\n      this.listQuery.type = obj.id\n      this.getList()\n    },\n    getList() {\n      this.listLoading = true\n      getDictList(this.listQuery).then(response => {\n          if (response.data) {\n            this.dictList = genTree(response.data)\n          this.listLoading = false\n          }\n      }).catch(error=>{this.listLoading = false})\n    },\n    getDictTypeList() {\n      this.treeLoding = true\n      getDictTypeList().then(response => {\n        this.dictTypeData = genTree(response.data)\n        this.treeLoding = false\n      })\n    },\n    handleAddDictType() {\n      this.dicttype = Object.assign({}, defaultDictType)\n      this.dgT1 = 'new'\n      this.dgV1 = true\n      this.$nextTick(() => {\n        this.$refs['Form1'].clearValidate()\n      })\n    },\n    handleAddDict() {\n      this.dict = Object.assign({}, defaultDict)\n      this.dict.type = this.listQuery.type\n      this.dgT2 = 'new'\n      this.dgV2 = true\n      this.$nextTick(() => {\n        this.$refs['Form2'].clearValidate()\n      })\n    },\n    handleEdit(scope) {\n      this.dict = Object.assign({}, scope.row) // copy obj\n      this.dgT2 = 'edit'\n      this.dgV2 = true\n      this.$nextTick(() => {\n        this.$refs['Form2'].clearValidate()\n      })\n    },\n    handleEditDictType(data) {\n      this.dicttype = Object.assign({}, data) // copy obj\n      this.dgT1 = 'edit'\n      this.dgV1 = true\n      this.$nextTick(() => {\n        this.$refs['Form1'].clearValidate()\n      })\n\n    },\n    handleDelete(scope) {\n      this.$confirm('确认删除?', '警告', {\n        confirmButtonText: '确认',\n        cancelButtonText: '取消',\n        type: 'error'\n      })\n        .then(async() => {\n          const { code } = await deleteDict(scope.row.id)\n          if (code>=200){\n          this.dictList.splice(scope.row.index, 1)\n          this.$message({\n            type: 'success',\n            message: '成功删除!'\n          })\n          }\n        })\n        .catch(err => {\n          console.error(err)\n        })\n    },\n    async confirm1(form) {\n      this.$refs[form].validate(valid => {\n        if (valid) {\n          const isEdit = this.dgT1 === 'edit'\n          if (isEdit) {\n            updateDictType(this.dicttype.id, this.dicttype).then(res => {\n                this.getDictTypeList()\n                this.dgV1 = false\n                this.$message({\n                  message: '编辑成功',\n                  type: 'success',\n                })\n            }).catch(error=>{})\n          } else {\n            createDictType(this.dicttype).then(res => {\n                this.getDictTypeList()\n                this.dgV1 = false\n                this.$message({\n                  message: '新增成功',\n                  type: 'success',\n                })\n            }).catch(error=>{})\n          }\n        } else {\n          return false\n        }\n      })\n    },\n    async confirm2(form) {\n      this.$refs[form].validate(valid => {\n        if (valid) {\n          const isEdit = this.dgT2 === 'edit'\n          if (isEdit) {\n            updateDict(this.dict.id, this.dict).then(res => {\n                this.getList()\n                this.dgV2 = false\n                this.$message({\n                  message: '编辑成功',\n                  type: 'success',\n                })\n            }).catch(error=>{})\n          } else {\n            createDict(this.dict).then(res => {\n                this.getList()\n                this.dgV2 = false\n                this.$message({\n                  message: '新增成功',\n                  type: 'success',\n                })\n            }).catch(error=>{})\n          }\n        } else {\n          return false\n        }\n      })\n    }\n  }\n}\n",null]}